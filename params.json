{
  "name": "meteor-example-uh-cas",
  "tagline": "University of Hawaii CAS authentication for Meteor",
  "body": "![](https://raw.githubusercontent.com/ics-software-engineering/meteor-example-uh-cas/master/doc/home-login.png)\r\n\r\n## Installation\r\n\r\nDownload the system, cd into the app directory, then execute:\r\n\r\n```\r\nmeteor --settings ../config/settings.development.json\r\n```\r\n\r\nThe settings file is needed to provide CAS parameter information. Note that you won't be able to successfully login until you edit the [settings.development.json](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/config/settings.development.json) file to indicate that your UH account should be one of those allowed to login.\r\n\r\n## Packages\r\n\r\nNote that this system adds two packages to support UH CAS authentication:\r\n \r\n  1. [atoy40:accounts-cas](https://atmospherejs.com/atoy40/accounts-cas). \r\n  2. 'random' (from the meteor core)\r\n\r\n## Walkthrough\r\n\r\nMeteor-example-uh-cas is a fork of [meteor-application-template](http://ics-software-engineering.github.io/meteor-application-template/) that illustrates how to perform [University of Hawaii CAS authentication](https://www.hawaii.edu/bwiki/display/UHIAM/UH+Web+Login+Service+-+CAS+v3).\r\n\r\nIt defines a template called Cas_Login in [cas-login.html](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/app/imports/ui/layouts/cas-login.html) and [cas-login.js](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/app/imports/ui/layouts/cas-login.js).  \r\nThe Cas_Login template is invoked in  [header.html](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/app/imports/ui/layouts/header.html) to put the menu item in the navbar for logging in and out.\r\n\r\nThe [settings.development.json](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/config/settings.development.json) file provides the configuration parameters to the meteor-accounts-cas package. Note that only two users are allowed to sign in; you will want to edit this setting before adapting this code to your own application. \r\n\r\nChecking to see that only the users specified in the settings.development.json file are allowed is implemented in [accounts.js](https://github.com/ics-software-engineering/meteor-example-uh-cas/blob/master/app/imports/startup/server/accounts.js). This file defines a function for validating new users that checks the user-supplied account name against the list of authorized account names in the settings file.\r\n\r\nAfter successful authentication, the home page shows the name of the logged in user and the menu changes to provide a logout link:\r\n\r\n![](https://raw.githubusercontent.com/ics-software-engineering/meteor-example-uh-cas/master/doc/home-logout.png)\r\n\r\nNote that UH CAS authentication saves a cookie that persists after logout. This means that after you logout, if you click the login button again, you will be immediately logged in without needing to re-enter your credentials. This, I guess, is a feature, not a bug.\r\n\r\n## About the UH CAS test server\r\n\r\nThe settings file configures your application to use the University of Hawaii \"test\" CAS server.  This server is different from the production UH CAS server in one significant way: not all UH accounts are available on this server. If you wish to use this server, you must first communicate with the UH ITS staff to ensure that it is configured with your UH account information. \r\n\r\nFor an overview of CAS in general and its implementation at UH, see [the Introduction to CAS Screencast](https://www.youtube.com/watch?v=M1NgsJ-NjDI).\r\n\r\n## Credits\r\n\r\nThanks to [Yongwen Xu](https://github.com/yongwen) for the sample code.\r\n\r\n\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}